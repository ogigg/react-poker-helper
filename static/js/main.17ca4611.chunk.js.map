{"version":3,"sources":["Rules.js","ItemTypes.js","styles.jsx","card.jsx","PokerLogic.jsx","App.js","serviceWorker.js","index.js"],"names":["RulesPage","ItemTypes","useStyles","makeStyles","theme","card","height","width","cardPlaceHolder","borderStyle","addNewCardBtnChildren","flex","suit","color","fontSize","margin","bigSuit","cardNumber","fontWeight","BaseCard","props","cardAttr","useState","state","setCardAttr","useDrag","item","type","end","monitor","dropResult","getDropResult","isNowCreated","destination","name","source","sourceId","number","collect","isDragging","drag","opacity","classes","className","ref","Card","style","CardContent","Grid","container","direction","alignContent","CardSuit","alignItems","size","getCardRank","cardRank","parseInt","isNaN","sortCards","cards","sort","a","b","Result","numbers","nextIndex","indexOf","length","getNextNumber","deckArray","totalNumberOfPairs","map","numberOfPairs","forEach","Math","floor","howManyPairs","totalNumberOfTriples","numberOfTriples","threeOfAKind","isStraight","cardsInRow","previousNumber","sortedCards","cardsWithStraight","console","log","some","o","push","c","straight","diamonds","spades","hearts","clubs","flush","Header","button","page","Button","component","Link","to","variant","AddNewCardBtn","MenuItemsNumbers","MenuItem","value","MenuItemsSuits","justify","InputLabel","id","Select","labelId","onChange","event","target","onClick","e","preventDefault","cardCreated","CardPlaceHolder","useDrop","accept","drop","isOver","canDrop","backgroundColor","cardsDeckArray","HomePage","setIsCardCreated","setPlaceholderId","DndProvider","backend","Backend","spacing","xs","App","setPage","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17ca4611.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function RulesPage(){\r\n    return (\r\n        <div>\r\n            <h1>Zasady gry w pokera</h1>\r\n                <p>Poker to jedna z najpopularniejszych gier karcianych, nie tylko w naszym kraju, ale na całym świecie. Jedni grają amatorsko, jedynie dla przyjemności, inni rywalizują w turniejach, gdzie stawką są naprawdę duże pieniądze. Gra w pokera wciąga i sprawia, że czasem trudno wręcz odejść od stołu i powiedzieć: pas!</p>\r\n            <h2>Układy kart w pokerze</h2>\r\n                <p><b>Para</b> – dwie karty o takiej samej wartości. W przypadku kilku takich układów na stole, wygrywa gracz, którego para składa się z silniejszych kart.</p>\r\n                <p><b>Dwie pary</b> – w przypadku kilku układów na stole, reguły pokerowe wskazują, że wygrywa gracz posiadający najwyższą parę.</p>\r\n                <p><b>Trójka</b> – układ złożony z trzech kart o tej samej wartości.</p>\r\n                <p><b>Strit</b> – sekwens kart w różnych kolorach, np. od 3 do 7 lub od 10 do Asa. Jeśli w poker przez Internet kilku graczy posiada strita, decyduje układ z najwyższą kartą.</p>\r\n                <p><b>Kolor</b> – układ pięciu kart w tym samym kolorze karcianym (pik, trefl, karo, kier). Analogiczna sytuacja co wyżej, w przypadku kilku takich układów decyduje wyższa karta.</p>\r\n                <p><b>Full</b> – bardzo mocny układ, który pozwala na odważne licytowanie w poker na kasę. Składa się z trójki i jednej pary. Jeśli kilku graczy uzyska ten układ, najpierw decyduje najwyższa trójka, a potem para.</p>\r\n                <p><b>Kareta</b> – cztery karty o jednakowej wartości. W poker online układ ten jest bardzo rzadki i zwykle pozwala na bardzo wysoką licytację.</p>   \r\n                <p><b>Poker</b> – najsilniejszy układ w poker zasady gry. To sekwens kart w tym samym kolorze. Innymi słowy, połączenie strita i koloru. Istnieje również poker królewski złożony od 10 do asa.</p>\r\n        </div>\r\n    );\r\n    }","export const ItemTypes = {\r\n    CARD: 'card',\r\n    CARD_PLACEHOLDER: 'cardPlaceholder',\r\n  }\r\n  ","import React, { useState, useRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './App.css';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport RulesPage from './Rules'\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { useDrag } from 'react-dnd'\r\nimport  { ItemTypes }  from './ItemTypes'\r\nimport Backend from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport { useDrop } from 'react-dnd'\r\nimport { BaseCard } from './card'\r\n\r\n\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    card: {\r\n        '-webkit-user-select': 'none', \r\n        '-moz-user-select': 'none',  \r\n        '-ms-user-select': 'none',   \r\n        'user-select': 'none',\r\n        // fontWeight: 'bold',\r\n        // fontSize: \"100px\",\r\n        height: \"15vw\",\r\n        width: \"10vw\",\r\n        // margin: '10px',\r\n    },\r\n    cardPlaceHolder: {\r\n      height: \"15vw\",\r\n      width: \"10vw\",\r\n      borderStyle: \"dashed\",\r\n    },\r\n    addNewCardBtnChildren: {\r\n      flex: '1',\r\n    },\r\n    suit: {\r\n      color: theme => theme.color,\r\n      fontSize: '1vw',\r\n      margin: \"-0.1vw\",\r\n    },\r\n    bigSuit: {\r\n      fontSize: \"5vw\",\r\n      margin: \"-0.5vw\",\r\n    },\r\n    cardNumber: {\r\n      fontWeight: \"bold\",\r\n      fontSize: \"2vw\",\r\n    },\r\n  \r\n  }));","import React, { useState, setState, useRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './App.css';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport RulesPage from './Rules'\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { useDrag } from 'react-dnd'\r\nimport  { ItemTypes }  from './ItemTypes'\r\nimport Backend from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport { useDrop } from 'react-dnd'\r\nimport { useStyles } from './styles'\r\n\r\nexport const BaseCard = (props) => {\r\n    const {cardAttr: [cardAttr, setCardAttr]} = {\r\n      cardAttr: useState(0),\r\n      ...(props.state || {})\r\n    }; \r\n\r\n  \r\n    const [{ isDragging }, drag] = useDrag({\r\n      item: {cardAttr ,type: ItemTypes.CARD },\r\n      end: (item, monitor) => {\r\n        const dropResult = monitor.getDropResult()\r\n        \r\n        if (item && dropResult) {\r\n          // console.log(\"Upuszczono!\");\r\n          // console.log(cardAttr);\r\n          // console.log(item);\r\n          // console.log(item.cardAttr.source);\r\n          setCardAttr({\r\n            ...cardAttr, \r\n            isNowCreated: true,\r\n            destination: dropResult.name,\r\n            source: props.sourceId,\r\n          });\r\n\r\n          const { number,suit,source,isNowCreated,destination} = cardAttr;\r\n            // setCardNumber(props.number); \r\n            // setSuit(props.suit);\r\n            // setPlaceholderId(dropResult.name);\r\n            // setIsCardCreated(true);\r\n            // setSourceId(props.sourceId);\r\n            //alert(`You dropped ${item.number} into ${dropResult.name}!`)\r\n        }\r\n      },\r\n      collect: monitor => ({\r\n        isDragging: !!monitor.isDragging(),\r\n      }),\r\n    })\r\n    const opacity = isDragging ? 0.1 : 1\r\n    const classes = useStyles(props);\r\n    var color = 'red';\r\n    if(props.suit == \"hearth\" || props.suit == \"diamond\"){\r\n      color = 'red';\r\n    }\r\n    if(props.suit == \"spade\" || props.suit == \"club\"){\r\n      color = 'black';\r\n    }\r\n  \r\n  \r\n    return(\r\n      <div className={classes.card} ref={drag}>\r\n      <Card style={{ opacity }} >\r\n        <CardContent >\r\n          <Grid container direction = \"column\" alignContent='flex-start'>\r\n            <Grid item className={classes.cardNumber}>\r\n              {props.number}\r\n            </Grid>\r\n            <CardSuit suit={props.suit} color={color}></CardSuit>\r\n          </Grid>\r\n          <Grid container  direction=\"column\" alignItems=\"center\">\r\n            <CardSuit suit = {props.suit} size=\"big\" color = {color} ></CardSuit>\r\n          </Grid>\r\n          <Grid container direction = \"column\" alignContent='flex-end'>\r\n            <CardSuit suit={props.suit} color={color}></CardSuit>\r\n            <Grid item className={classes.cardNumber}>\r\n              {props.number}\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n      </div>\r\n    );\r\n  }\r\n  function CardSuit(props){\r\n    const classes = useStyles(props);\r\n    if(props.suit === \"diamond\"){\r\n      return(\r\n        <div className={`${props.size == 'big'? classes.bigSuit : \"\" } ${classes.suit}`}>\r\n          &#9830;\r\n        </div>\r\n      )\r\n    }\r\n    else if(props.suit === \"spade\"){\r\n      return(\r\n        <div className={`${props.size === 'big'? classes.bigSuit : \"\" } ${classes.suit}`}>\r\n          &#9824;\r\n        </div>\r\n      )\r\n    }\r\n    else if(props.suit === \"heart\"){\r\n      return(\r\n        <div className={`${props.size === 'big'? classes.bigSuit : \"\" } ${classes.suit}`}>\r\n          &#9829;\r\n        </div>\r\n      )\r\n    }\r\n    else if(props.suit === \"club\"){\r\n      return(\r\n        <div className={`${props.size === 'big'? classes.bigSuit : \"\" } ${classes.suit}`}>\r\n          &#9827;\r\n        </div>\r\n      )\r\n    }\r\n    else { //return blank\r\n      return(\r\n        <div className={`${props.size === 'big'? classes.bigSuit : \"\" } ${classes.suit}`}>\r\n          &nbsp;\r\n        </div>\r\n      )\r\n    }\r\n  }","import React, { useState, useEffect ,setState, useRef } from 'react';\r\n\r\n\r\nconst alSameSuit = (cards) => {\r\n    let suit = cards[0].suit; \r\n    cards.forEach(card => {\r\n        if(card.suit != suit){\r\n            return false;\r\n        }\r\n    });\r\n    return true;\r\n}\r\n\r\n\r\nconst threeOfAKind = (cards) => {\r\n    let totalNumberOfTriples = 0;\r\n    ['2','3','4','5','6','7','8','9','10','J','Q','K','A'].map((number) =>{\r\n        let numberOfTriples = 0;\r\n        cards.forEach(card => {   \r\n            if(card.number == number){\r\n                numberOfTriples ++;\r\n            }\r\n            \r\n        })\r\n        if(numberOfTriples>=3){\r\n            totalNumberOfTriples = totalNumberOfTriples + Math.floor(numberOfTriples/3);\r\n        }\r\n        // if(numberOfPairs>=3){\r\n        //     return true;\r\n        // }\r\n    })\r\n    if(totalNumberOfTriples == 0) {\r\n        return <div></div>\r\n    }\r\n    else{\r\n        return(<p> Liczba trójek: {totalNumberOfTriples}</p>);\r\n    }\r\n}\r\n\r\nconst howManyPairs = (cards) => {\r\n    let totalNumberOfPairs = 0;\r\n    ['2','3','4','5','6','7','8','9','10','J','Q','K','A'].map((number) =>{\r\n        let numberOfPairs = 0;\r\n        cards.forEach(card => {   \r\n            if(card.number == number){\r\n                numberOfPairs ++;\r\n            }\r\n        })\r\n        totalNumberOfPairs = totalNumberOfPairs + Math.floor(numberOfPairs/2);\r\n    })\r\n\r\n    if(totalNumberOfPairs == 0) {\r\n        return <div></div>\r\n    }\r\n    else{\r\n        return(<p> Liczba par: {totalNumberOfPairs}</p>);\r\n    }\r\n}\r\n\r\nconst getNextNumber = (number) => {\r\n    let numbers = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];\r\n    let nextIndex = numbers.indexOf(number);\r\n    if(nextIndex == -1){ //number not in array\r\n        return null;\r\n    }\r\n    nextIndex++;\r\n    \r\n    if(nextIndex< numbers.length){\r\n        return numbers[nextIndex];\r\n    }\r\n    else return null;\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nconst flush = (cards) => { //5 cards with the same color\r\n    let diamonds = 0;\r\n    let spades = 0;\r\n    let hearts = 0;\r\n    let clubs = 0;\r\n    cards.map(card => {\r\n        if(card.suit == 'spade')\r\n            spades++\r\n        if(card.suit == 'diamond')\r\n            diamonds++\r\n        if(card.suit == 'heart')\r\n            hearts++\r\n        if(card.suit == 'club')\r\n            clubs++\r\n    })\r\n    if(spades >=5)\r\n        return(<p> Kolor - Pik</p>);\r\n    if(diamonds >=5)\r\n        return(<p> Kolor - Karo</p>);\r\n    if(hearts >=5)\r\n        return(<p> Kolor - Kier</p>);\r\n    if(clubs >=5)\r\n        return(<p> Kolor - Trefl</p>);\r\n    else\r\n        return(<div></div>);\r\n\r\n}\r\n\r\nconst straight = (cards) => { //5 cards in a row\r\n    let isStraight = false;\r\n    let cardsInRow = 0;\r\n    let previousNumber = '';\r\n    let sortedCards = sortCards(cards);\r\n    let cardsWithStraight = [];\r\n    console.log(sortedCards);\r\n    //check if ace is in cards and check for ace-straight (A 2 3 4 5) or (10 J Q K A)\r\n    if(sortedCards.some(o=>o.number == 'A'))\r\n        if( sortedCards.some(o=>o.number == '2') && \r\n            sortedCards.some(o=>o.number == '3') &&\r\n            sortedCards.some(o=>o.number == '4') && \r\n            sortedCards.some(o=>o.number == '5')){\r\n                isStraight=true;\r\n                cardsWithStraight=['A','2','3','4','5'];\r\n        }\r\n        \r\n    if(!isStraight){\r\n        for (let card of sortedCards) {\r\n            if(cardsInRow == 0){\r\n                previousNumber = card.number;\r\n                cardsInRow++;\r\n                cardsWithStraight.push(card.number);\r\n            }  \r\n            else{\r\n                if(getCardRank(card.number) == getCardRank(previousNumber)+1){\r\n                    cardsInRow ++;\r\n                    previousNumber = card.number;\r\n                    cardsWithStraight.push(card.number);\r\n                }\r\n                else{\r\n                    cardsInRow = 0;\r\n                    previousNumber = '';\r\n                    cardsWithStraight = [];\r\n                }\r\n            }\r\n            if(cardsInRow == 5){\r\n                isStraight=true;\r\n                break;\r\n                \r\n            }\r\n            \r\n            \r\n        }\r\n    }   \r\n    if(isStraight)\r\n        return(<p> Strit: ({cardsWithStraight.map(c=> {return (c + \", \");})})</p>);\r\n        \r\n    else\r\n        return(<div></div>);\r\n\r\n}\r\n\r\nconst getCardRank = (card) => {\r\n    const cardRank = parseInt(card);\r\n    if(isNaN(cardRank)){\r\n        if(card == '')\r\n            return 15;\r\n        if(card == 'J')\r\n            return 11;\r\n        if(card == 'Q')\r\n            return 12;\r\n        if(card == 'K')\r\n            return 13;\r\n        if(card == 'A')\r\n            return 14;\r\n    }\r\n    else \r\n        return cardRank\r\n    \r\n}\r\n\r\nconst sortCards = (cards) => {\r\n    //sorting cards ascending by number\r\n    const tempCards = [...cards]\r\n    return tempCards.sort(function(a, b){return getCardRank(a.number)-getCardRank(b.number)}) \r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const Result = (props) =>{\r\n    let a = ''\r\n    getNextNumber('3');\r\n    // if(isThreeOfAKind){\r\n    //     a = 'three'\r\n    // }\r\n    let deckArray = props.deckArray;\r\n    // let handArray = props.handArray;\r\n    return(<div>{howManyPairs(deckArray)} {threeOfAKind(deckArray)}  {straight(deckArray)} {flush(deckArray)}</div>);\r\n\r\n    \r\n}","import React, { useState, useEffect ,setState, useRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './App.css';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport RulesPage from './Rules'\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { useDrag } from 'react-dnd'\r\nimport  { ItemTypes }  from './ItemTypes'\r\nimport Backend from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport { useDrop } from 'react-dnd'\r\nimport { BaseCard } from './card'\r\nimport { useStyles } from './styles'\r\nimport { Result } from './PokerLogic'\r\n\r\nfunction Header(props){\r\n  let button;\r\n  if(props.page === \"rules\"){\r\n    button = \r\n    <Button component={Link} to=\"/rules\" variant=\"contained\">\r\n      Zasady gry\r\n    </Button>\r\n  }\r\n  else{\r\n    button = \r\n    <Button component={Link} to=\"/home\" variant=\"contained\">\r\n      Powrót\r\n    </Button>\r\n  }\r\n\r\n  return (\r\n    <div className=\"header container\">\r\n    Aplikacja wspomagająca grę w pokera\r\n    {button}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n\r\nfunction AddNewCardBtn(props){\r\n\r\n  const {cardAttr: [cardAttr, setCardAttr]} = {\r\n    cardAttr: useState(0),\r\n    ...(props.state || {})\r\n  };\r\n  const classes = useStyles();\r\n  \r\n  const onAddCardClick = e => {\r\n    e.preventDefault();\r\n    // console.log(\"onAddCardClick\");\r\n    \r\n    setCardAttr({...cardAttr, source: -1, destination: -1, isNowCreated: true});\r\n    // console.log(cardAttr);\r\n  }\r\n  const handleCardNumberChange = event =>{\r\n    setCardAttr({...cardAttr, number: event.target.value});\r\n  }\r\n  const handleCardSuitChange = event =>{\r\n    setCardAttr({...cardAttr, suit: event.target.value});\r\n  }\r\n\r\n \r\n  const MenuItemsNumbers = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'].map((number) =>\r\n    <MenuItem value={number}>{number}</MenuItem>\r\n  );\r\n  const MenuItemsSuits = ['diamond','heart','spade','club'].map((suit) =>\r\n    <MenuItem value={suit}>{suit}</MenuItem>\r\n  );\r\n  return(\r\n    // <div >\r\n    <div className={classes.addNewCardBtnChildren }>\r\n    <Grid container direction = \"row\" justify=\"flex-end\" alignItems=\"center\" >\r\n      <div >\r\n    <InputLabel id=\"number-id\">Figura:</InputLabel>\r\n      <Select\r\n        labelId=\"number-id\"\r\n        id=\"number-id\"\r\n        value={cardAttr.number}\r\n        onChange={handleCardNumberChange}>\r\n          {MenuItemsNumbers}\r\n      </Select>\r\n      </div>\r\n      <div >\r\n    <InputLabel id=\"suit-id\">Kolor:</InputLabel>\r\n      <Select\r\n        labelId=\"suit-id\"\r\n        id=\"suit-id\"\r\n        value={cardAttr.suit}\r\n        onChange={handleCardSuitChange}>\r\n          {MenuItemsSuits}\r\n      </Select>\r\n      </div>\r\n      <div >\r\n        <Button variant=\"contained\" color = \"primary\" onClick = {onAddCardClick} >Dodaj Kartę</Button>\r\n      </div>\r\n      {/* {cardAttr.number} i \r\n      {cardAttr.suit} i\r\n      {cardAttr.source} i\r\n      {cardAttr.isNowCreated} i */}\r\n    </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst  CardPlaceHolder = (props) => {\r\n  const [{ canDrop, isOver }, drop] = useDrop({\r\n    accept: ItemTypes.CARD,\r\n    drop: () => ({ name: props.id }),\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  })\r\n\r\n  const isActive = canDrop && isOver\r\n  let backgroundColor = 'white'\r\n  if (isActive) {\r\n    backgroundColor = 'green'\r\n  } else if (canDrop) {\r\n    backgroundColor = 'gray'\r\n  }\r\n  //\r\n  const classes = useStyles();\r\n  return(\r\n    <Grid item ref={drop} style={{ backgroundColor }}>\r\n    <div className={classes.cardPlaceHolder}>\r\n      {props.component}\r\n      {/* {lastDroppedItem && (\r\n        <p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\r\n      )} */}\r\n    </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\nvar cardsDeckArray = [\r\n  {id: 0, number: '', suit: '', card: <div></div>},\r\n  {id: 1, number: '', suit: '', card: <div></div>},\r\n  {id: 2, number: '', suit: '', card: <div></div>},\r\n  {id: 3, number: '', suit: '', card: <div></div>},\r\n  {id: 4, number: '', suit: '', card: <div></div>},\r\n  {id: 5, number: '', suit: '', card: <div></div>},\r\n  {id: 6, number: '', suit: '', card: <div></div>}]; \r\n// var cardsDeckArray = [<div></div>,<div></div>,<div></div>,<div></div>,<div></div>,<div></div>,<div></div>]; \r\nvar cardsHandArray = []; //TODO change this ugly thing\r\nvar cardCreated ;\r\nfunction HomePage(){\r\n  const classes = useStyles();\r\n  const [suit, setSuit] = useState('');\r\n  const [cardNumber, setCardNumber] = useState('');\r\n  const [isCardCreated, setIsCardCreated] = useState('');\r\n  const [placeholderId, setPlaceholderId] = useState('');\r\n  const [sourceId, setSourceId] = useState('');\r\n  const [cardAttr, setCardAttr] = useState({\r\n     number: 5, \r\n     suit: 'heart' , \r\n     source: '', \r\n     isNowCreated : false, \r\n     destination: ''\r\n    });\r\n  const state = {\r\n    cardAttr: [cardAttr, setCardAttr],\r\n  }\r\n  if(cardAttr.isNowCreated){\r\n    // console.log(\"Upuszczono na : \" + cardAttr.destination)\r\n    setCardAttr({...cardAttr, isNowCreated: false});\r\n    if(cardAttr.destination == -1){\r\n      cardCreated = <BaseCard color=\"red\" number={cardAttr.number} suit = {cardAttr.suit} state = {state} sourceId = {-1}></BaseCard>;\r\n      // console.log(cardCreated)\r\n    }\r\n    else{\r\n      // console.log(\"Upuszczono na : \" + cardAttr.destination)\r\n      // console.log(\"Upuszczono z : \" + cardAttr.source)\r\n      cardsDeckArray[cardAttr.destination].suit = cardAttr.suit;\r\n      cardsDeckArray[cardAttr.destination].number = cardAttr.number;\r\n      cardsDeckArray[cardAttr.destination].card = \r\n      <BaseCard color=\"red\" \r\n        number={cardAttr.number} \r\n        suit = {cardAttr.suit} \r\n        state = {state} \r\n        sourceId = {cardAttr.destination}\r\n      ></BaseCard>;\r\n      // console.log(cardsDeckArray[cardAttr.destination])\r\n      cardCreated = <div></div>;\r\n      if(cardAttr.source != -1 && cardAttr.source != cardAttr.destination ){\r\n        cardsDeckArray[cardAttr.source].card = <div></div>;\r\n        cardsDeckArray[cardAttr.source].number = '';\r\n        cardsDeckArray[cardAttr.source].suit = '';\r\n      }\r\n      setPlaceholderId('');\r\n    }\r\n    \r\n    setIsCardCreated(false);\r\n    // console.log(\"Zmieniono!\");\r\n    // console.log(cardsDeckArray);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <DndProvider backend={Backend}>\r\n      <Grid container>\r\n        <h2>Karty na stole: </h2>\r\n        <AddNewCardBtn state = {state}/>\r\n      </Grid>\r\n      {/* {cardAttr.number}/{cardAttr.suit}/{cardAttr.source}/{cardAttr.destination}/     */}\r\n      <Grid container spacing={1}>\r\n        <Grid container item xs = {8} spacing={1}>\r\n          <CardPlaceHolder id =\"0\" component={cardsDeckArray[0].card}/>\r\n          <CardPlaceHolder id =\"1\" component={cardsDeckArray[1].card}/>\r\n          <CardPlaceHolder id =\"2\" component={cardsDeckArray[2].card}/>\r\n          <CardPlaceHolder id =\"3\" component={cardsDeckArray[3].card}/>\r\n          <CardPlaceHolder id =\"4\" component={cardsDeckArray[4].card}/>\r\n        </Grid>\r\n        <Grid container item xs = {4} alignItems=\"center\" justify=\"flex-end\">\r\n          <CardPlaceHolder id =\"-1\" component={\r\n            <div>{cardCreated}</div> \r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <Grid container>\r\n          <h2>Karty w ręku:</h2>\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Grid container item spacing={1} xs = {8}>\r\n            <CardPlaceHolder id =\"5\" component={cardsDeckArray[5].card}/>\r\n            <CardPlaceHolder id =\"6\" component={cardsDeckArray[6].card}/>\r\n            \r\n          </Grid>\r\n          <Grid container item xs = {4} alignItems=\"center\" justify=\"flex-end\">\r\n            {/* <CardPlaceHolder component={ */}\r\n              <Result deckArray = {cardsDeckArray}></Result>\r\n              {/* div>Twoj wynik to:</div> \r\n              }/> */}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </DndProvider>\r\n  </div>\r\n  );\r\n}\r\n \r\nfunction App() {\r\n  const [page, setPage] = useState(\r\n    \"rules\"\r\n  );\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <Header page = {page}/>\r\n      <Switch>\r\n      <Route path=\"/rules\" render={props => ( setPage(\"home\"),\r\n                    <RulesPage />\r\n                )} >\r\n        </Route>\r\n      <Route path=\"/\" render={props => ( setPage(\"rules\"),\r\n                    <HomePage />\r\n                )} >\r\n        </Route>\r\n      </Switch>\r\n\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}